# -*- coding: utf-8 -*-
class Node(object):

    def __init__(self, value):
        self.value = value
        self.next = None
        self.prev = None


class List(object):

    def __init__(self):
        self.head = None
        self.tail = None

    def insert(self, n, x):
        # Not actually perfect: how do we prepend to an existing list?
        if n != None:
            x.next = n.next
            n.next = x
            x.prev = n
            if x.next != None:
                x.next.prev = x
        if self.head == None:
            self.head = self.tail = x
            x.prev = x.next = None
        elif self.tail == n:
            self.tail = x
   #function to search for a node
    def searchNum(self, a):
        curr = self.head
        while curr.value != a and curr.next:
            curr = curr.next
        if curr.value == a:
            return curr
        else:
            return None
        
    #delete function
    def delete(self, a):
        n = self.searchNum(a)#serach number to delete from the searchNum function 
        print (n.value)
        if self.head == n and self.tail == n:
            self.head = None
            self.tail = None
        elif self.head == n:
            self.head = n.next
            self.head.prev = None
        elif self.tail == n:
            self.tail = n.prev
            self.tail.next = None
        else:
            n.prev.next = n.next
            n.next.prev = n.prev

    def display(self):
        values = []
        n = self.head
        while n != None:
            values.append(str(n.value))
            n = n.next
        print ("List: ", ",".join(values))

if __name__ == '__main__':
    l = List()
    l.insert(None, Node(4))
    l.insert(l.head, Node(6))
    l.insert(l.head, Node(8))
    l.display()
    l.delete(4)#delete 4 from the node
    l.display()
